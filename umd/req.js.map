{"version":3,"sources":["req.js"],"names":["aggregate_req_body_query","req","output","body","inputs","query","params","key","val","decodeURIComponent","trim","includes","JSON","parse","e","window","browser","func","__"],"mappings":";AA4FA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,8BAAA,EAlFA,IAAMA,EAA2B,SAAUC,GAIrCC,IAAAA,EAAS,GAGTD,EAAIE,OACND,EAASD,EAAIE,MAMXC,IAAAA,EAAS,GAKTH,GAJAA,EAAII,QACND,EAASH,EAAII,OAGXJ,EAAIK,OACD,IAAA,IAAIC,KAAON,EAAIK,OAAQ,CACtBE,IAAAA,EAAMP,EAAIK,OAAOC,GACjBC,GAAa,IAANA,IACTJ,EAAOG,GAAOC,GAOhBJ,GAAAA,EACG,IAAA,IAAIG,KAAOH,EAAQ,CAClBI,IAAAA,EAAMJ,EAAOG,GACbC,GAAQ,IAARA,GAIA,GAACA,IACLA,EAAMC,mBAAmBD,GAAKE,QAE1BF,GAAQ,cAARA,EAIAA,GAAQ,SAARA,EAIAA,GAAQ,SAARA,EAIAA,GAAQ,UAARA,EAAAA,CAIA,GAAA,CAAC,IAAK,IAAK,KAAKG,SAASH,EAAI,IAC3B,IACFA,EAAMI,KAAKC,MAAML,GACjB,MAAOM,GACPN,EAAM,GAGVN,EAAOK,GAAOC,OAVZN,EAAOK,IAAO,OAJdL,EAAOK,IAAO,OAJdL,EAAOK,GAAO,YAJdL,EAAOK,GAAO,iBAPdL,EAAOK,GAAO,EAiCbL,OAAAA,GAMT,GASA,QAAA,yBAAA,EATsB,YAAXa,oBAAAA,OAAAA,YAAAA,EAAAA,SAAqB,CACxBC,IAAAA,EAAU,CAAEhB,yBAAAA,GAIb,IAAA,IAAIiB,KAFTF,OAAOG,GAAKH,OAAOG,IAAM,GAERF,EACfD,OAAOG,GAAGD,GAAQD,EAAQC","file":"req.js","sourceRoot":"../esm","sourcesContent":["/**\n * Parse and combine POST data and URL params into JavaScript object\n * @param req {object} - IMPORTANT: does not have to be real api request. Can be simple object.\n * @param req.body {object} - key/value pairs, already parsed and ready to use (ex: {options:{}})\n * @param req.query {object} - object of key/value pairs from URL query string (ex: ?str=wordio&tld=co)\n *    will override req.body. Values will be processed by decodeURIComponent\n * @param req.params {object} - object of key/value pairs from URL path  (ex: /v1/word/:key)\n *    will override req.query. Values will be processed by decodeURIComponent\n * @returns {{}} - combined keys/values. Original request object will NOT be modified.\n */\nconst aggregate_req_body_query = function (req) {\n  /*\n   * 1. prepare output\n   */\n  let output = {};\n  // default value - to be overridden by more query/params:\n  // req.body is least important\n  if (req.body) {\n    output = req.body;\n  }\n  /*\n   * 2. aggregate inputs\n   */\n  // req.query is more important than req.body\n  let inputs = {};\n  if (req.query) {\n    inputs = req.query;\n  }\n  // req.params is the most important\n  if (req.params) {\n    for (let key in req.params) {\n      let val = req.params[key]\n      if (val && val!==0) {\n        inputs[key] = val\n      }\n    }\n  }\n  /*\n   * 3. process inputs\n   */\n  if (inputs) {\n    for (let key in inputs) {\n      let val = inputs[key];\n      if (val === 0) {\n        output[key] = 0;\n        continue;\n      }\n      if (!val) continue;\n      val = decodeURIComponent(val).trim();\n      if (!val) continue;\n      if (val === \"undefined\") {\n        output[key] = \"undefined\";\n        continue;\n      }\n      if (val === \"null\") {\n        output[key] = \"null\";\n        continue;\n      }\n      if (val === \"true\") {\n        output[key] = true;\n        continue;\n      }\n      if (val === \"false\") {\n        output[key] = false;\n        continue;\n      }\n      if (['\"', \"{\", \"[\"].includes(val[0])) {\n        try {\n          val = JSON.parse(val);\n        } catch (e) {\n          val = \"\";\n        }\n      }\n      output[key] = val;\n    }\n  }\n  // combined\n  return output;\n};\n\n/*\n * EXPORT FOR BROWSER\n */\nif (typeof window === \"object\") {\n  const browser = { aggregate_req_body_query };\n  // set up for export\n  window.__ = window.__ || {};\n  // flatten\n  for (let func in browser) {\n    window.__[func] = browser[func];\n  }\n}\n/* EXPORT FOR NODE */\nexport { aggregate_req_body_query };\n"]}
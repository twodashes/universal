{"version":3,"sources":["arr.js"],"names":["arr_clone","arr","map","item","Array","isArray","arr_length","length","arr_fill","value","len","i","push","arr_subtract","a","b","filter","includes","arr_remove_item","it","arr_includes","arr_truthy_values","val","browser","window","func","__"],"mappings":";AAuFA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAjFA,SAASA,EAAUC,GACVA,OAAAA,EAAIC,IAAI,SAAAC,GAAQC,OAAAA,MAAMC,QAAQF,GAAQH,EAAUG,GAAQA,IASjE,SAASG,EAAWL,GACXA,OAAAA,GAAOA,EAAIM,OAASN,EAAIM,OAAS,EAS1C,SAASC,EAASC,EAAOC,GAElB,IADDT,IAAAA,EAAM,GACDU,EAAI,EAAGA,EAAID,EAAKC,IACvBV,EAAIW,KAAKH,GAEJR,OAAAA,EAUT,SAASY,IAAaC,IAAAA,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIC,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACzBD,OAAAA,EAAEE,OAAO,SAAUL,GACjB,OAACI,EAAEE,SAASN,KAOvB,SAASO,IAAgBjB,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIE,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACjCF,OAAAA,EAAIe,OAAO,SAACG,GAAOA,OAAAA,IAAOhB,IASnC,SAASiB,EAAaN,EAAGC,GAChBD,OAAAA,EAAEE,OAAO,SAAUL,GACjBI,OAAAA,EAAEE,SAASN,KAStB,SAASU,EAAkBpB,GAClBA,OAAAA,EAAIe,OAAO,SAACM,GAAQ,QAAEA,IAe/B,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAAA,QAAA,SAAA,EAAA,QAAA,aAAA,EAAA,QAAA,WAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,aAAA,EAAA,QAAA,kBAAA,EATA,IAAMC,EAAU,CAAEvB,UAAAA,EAAWQ,SAAAA,EAAUY,aAAAA,EAAcd,WAAAA,EAAYY,gBAAAA,EAAiBL,aAAAA,EAAcQ,kBAAAA,GAChG,GAAsB,YAAXG,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAM,GAERH,EACfC,OAAOE,GAAGD,GAAQF,EAAQE","file":"arr.js","sourceRoot":"../esm","sourcesContent":["\n/**\n * Deep copy an array\n * @param {array} arr\n * @returns {array}\n */\nfunction arr_clone(arr) {\n  return arr.map(item => Array.isArray(item) ? arr_clone(item) : item);\n}\n\n\n/**\n * arr.length alternative - checks for existence of ${arr}\n * @param {array} arr\n * @returns {number}\n */\nfunction arr_length(arr) {\n  return arr && arr.length ? arr.length : 0;\n}\n\n/**\n * Create a new array, and fill it with values (all same value)\n * @param {*} value - what value to assign to each item in array\n * @param {number} len - how long to make the array\n * @returns {array}\n */\nfunction arr_fill(value, len) {\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(value);\n  }\n  return arr;\n}\n\n/**\n * Subtract array B values from array A. Return remaining array A. Expects 2 parameters, each an array.\n *      NOTE: first array A must be the main one. Words also appearing in B will be removed\n * @param a {array} - values we care about. Analyze these, compared to b\n * @param b {array} - for comparison only. Array values unique to B will be ignored\n * @returns {array} - returns an array of values which appear in A but not B\n */\nfunction arr_subtract(a = [], b = []) {\n  return a.filter(function (i) {\n    return !b.includes(i);\n  });\n}\n\n/**\n * Remove an item (if exact match string/number) from array\n */\nfunction arr_remove_item(arr = [], item = \"\") {\n  return arr.filter((it) => it !== item);\n}\n\n/**\n * Similarities between arrays A and B\n * @param a {array}\n * @param b {array}\n * @returns {array} - returns an array with values which appear in both A and B\n */\nfunction arr_includes(a, b) {\n  return a.filter(function (i) {\n    return b.includes(i);\n  });\n}\n\n/**\n * Array with empty/falsy values removed.\n * @param arr {array}\n * @returns {array}\n */\nfunction arr_truthy_values(arr) {\n  return arr.filter((val) => !!val);\n}\n\n/*\n * EXPORT FOR BROWSER\n */\nconst browser = { arr_clone, arr_fill, arr_includes, arr_length, arr_remove_item, arr_subtract, arr_truthy_values };\nif (typeof window === \"object\") {\n  // set up for export\n  window.__ = window.__ || {};\n  // flatten\n  for (let func in browser) {\n    window.__[func] = browser[func];\n  }\n}\n/* EXPORT FOR NODE */\nexport { arr_clone, arr_fill, arr_includes, arr_length, arr_remove_item, arr_subtract, arr_truthy_values };\n"]}
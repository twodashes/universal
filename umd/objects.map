{"version":3,"sources":["objects.js"],"names":["objects_are_equal","obj1","obj2","JSON","stringify","object_keys_from_array_values","arr","value","obj","objects_merge","obj_merge","keys","Set","Object","key","hasOwnProperty","obj1v","obj2v","Array","isArray","window","browser","func","__"],"mappings":"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","file":"objects.map","sourceRoot":"../esm","sourcesContent":["/**\n * @param {object} obj1\n * @param {object} obj2\n * @returns {boolean} - true if equal\n */\nconst objects_are_equal = function objects_are_equal(obj1, obj2) {\n  return JSON.stringify(obj1) === JSON.stringify(obj2)\n};\n\n/**\n * Create an object from array. Object's keys will made from Array's values.\n *    Use this to filter an array, keep only unique values, and maybe make something of them.\n *    This might be faster than using ES6 `[...new Set(...arr)]`, because it loops only once.\n * @param {array} arr - array values will be used, keys ignored\n * @param {*} value - any value to assign to each new item in object. Default value = true.\n * @returns {object} - from array values. Duplicate array values have been removed.\n */\nconst object_keys_from_array_values = function obj_from_array(arr, value=true) {\n  let obj = {};\n  for (let key of arr) {\n    obj[key] = value;\n  }\n  return obj\n};\n\n/**\n * Merge key/values of two objects into one - recursively\n * @param {object} obj1 - First object, the default one\n * @param {object} obj2 - Second object, will overwrite first!\n * @returns {object} obj - Combined object\n */\nconst objects_merge = function obj_merge(obj1, obj2) {\n  // console.log('obj1', JSON.parse(JSON.stringify(obj1)));\n  // console.log('obj2', JSON.parse(JSON.stringify(obj2)));\n  let obj = {};\n  // get keys from both objects\n  let keys = [...new Set([...Object.keys(obj1), ...Object.keys(obj2)])];\n  for (let key of keys) {\n    // both assigned ? then merge\n    if (obj1.hasOwnProperty(key) && obj2.hasOwnProperty(key)) {\n      let obj1v = obj1[key];\n      let obj2v = obj2[key];\n      // if both objects have same key, then merge\n      if (typeof obj1v !== typeof obj2v) {\n        // oh no! same key, but value is different type!\n        obj[key] = obj2v || obj1v;\n        // console.warn('obj_merge(obj1, obj2) could not merge types: key/value type of each must be same: ', typeof obj1v, typeof obj2v);\n      } else {\n        // same type of value - lets try to combine...\n        switch (typeof obj1v) {\n          case \"object\":\n            // type = object\n            if (!!obj2v && !!obj1v) {\n              // both are truthy...\n              if (Array.isArray(obj2v) && Array.isArray(obj1v)) {\n                // both arrays...\n                obj[key] = [...new Set([...obj1[key], ...obj2[key]])];\n              } else if (!Array.isArray(obj2v) && !Array.isArray(obj1v)) {\n                // both dictionaries...\n                obj[key] = obj_merge(obj1[key], obj2[key]);\n              } else {\n                // one is dictionary, other is array.\n                // cannot combine unlike types. Use first...\n                obj[key] = obj1[key];\n              }\n            } else {\n              // at least one is null...\n              obj[key] = obj2v || obj1v;\n            }\n            break\n          default:\n            // type = undefined, function, boolean, string, number\n            obj[key] = obj2v || obj1v;\n            break\n        }\n      }\n    } else if (obj2.hasOwnProperty(key)) {\n      // otherwise, use whichever one has a value\n      obj[key] = obj2[key];\n    } else {\n      // otherwise, use whichever one has a value\n      obj[key] = obj1[key];\n    }\n  }\n  // console.log('obj', obj);\n  return obj\n};\n\n/*\n * EXPORT FOR BROWSER\n */\nif (typeof window === \"object\") {\n  const browser = { objects_merge, object_keys_from_array_values, objects_are_equal };\n  // set up for export\n  window.__ = window.__ || {};\n  // flatten\n  for (let func in browser) {\n    window.__[func] = browser[func];\n  }\n}\n/* EXPORT FOR NODE */\nexport { objects_merge, object_keys_from_array_values, objects_are_equal };\n"]}
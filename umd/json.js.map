{"version":3,"sources":["json.js"],"names":["jss","val","JSON","stringify","jsp","parse","browser","window","func","__"],"mappings":";AAgEA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,QAAA,SAAA,EAhEA,IAAMA,EAAM,SAAUC,GACbC,OAAAA,KAAKC,UAAUF,IA+DxB,QAAA,IAAA,EA5DA,IAAMG,EAAM,SAAUH,GACbC,OAAAA,KAAKG,MAAMH,KAAKC,UAAUF,KA2DnC,QAAA,IAAA,EATA,IAAMK,EAAU,CAAEF,IAAAA,EAAKJ,IAAAA,GACvB,GAAsB,YAAXO,oBAAAA,OAAAA,YAAAA,EAAAA,SAIJ,IAAA,IAAIC,KAFTD,OAAOE,GAAKF,OAAOE,IAAM,GAERH,EACfC,OAAOE,GAAGD,GAAQF,EAAQE","file":"json.js","sourceRoot":"../esm","sourcesContent":["const jss = function (val) {\n  return JSON.stringify(val);\n};\n\nconst jsp = function (val) {\n  return JSON.parse(JSON.stringify(val));\n};\n\n// /**\n//  * Parse JSON variable - recursively\n//  * @param {*} value - Any variable type\n//  * @returns {*} value - Intelligently parsed. Note: Will convert stringified number to type number!\n//  * NOTE: JSON can not stringify ES6 types Set and Map. Stringify/parse, changes value to empty object.\n//  * As a workaround, before stringifying, convert Set to Array, and Map to Array of tuples.\n//  */\n// const json_parse = function json_parse(value) {\n//   let variable;\n//   // Simple parse variable\n//   if (typeof value === \"string\" && (value.includes(\"[\") || value.includes(\"{\"))) {\n//     try {\n//       variable = JSON.parse(value); // JSON stringified array or object\n//     } catch (e) {\n//       try {\n//         variable = JSON.parse(value.replace(/[\\r\\n]+/g, \"\").replace(/[\\t]+/g, \" \")); // edge case\n//       } catch (e) {\n//         variable = value.includes(\"[\") ? [] : {}; // broken JSON array or object\n//       }\n//     }\n//   } else if (value === \"true\" || value === \"false\" || \"null\" || \"undefined\") {\n//     // boolean/null should NOT have been stringified\n//     variable = value; // string\n//   } else {\n//     // simple value (JSON.parse converts numbers in quotes to type number)\n//     try {\n//       variable = JSON.parse(value); // number\n//     } catch (e) {\n//       variable = value; // string or undefined\n//     }\n//   }\n//   // Parse recursively - if Object/Array\n//   if (typeof variable === \"object\") {\n//     // iterate all props/values\n//     for (let key in variable) {\n//       if (!variable.hasOwnProperty(key)) continue\n//       // parse each prop/value\n//       variable[key] = json_parse(variable[key]);\n//     }\n//   }\n//\n//   return variable\n// };\n\n/*\n * EXPORT FOR BROWSER\n */\nconst browser = { jsp, jss };\nif (typeof window === \"object\") {\n  // set up for export\n  window.__ = window.__ || {};\n  // flatten\n  for (let func in browser) {\n    window.__[func] = browser[func];\n  }\n}\n/* EXPORT FOR NODE */\nexport { jsp, jss };\n"]}
{"version":3,"sources":["obj.js"],"names":["obj_prop","obj","prop_child","prop_grandchild","prop_grandgrandchild","obj_first_value","key","obj_first_entry","obj_is_empty","prop","Object","prototype","hasOwnProperty","call","window","browser","func","__"],"mappings":";AAiFA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAtEA,SAASA,EAASC,EAAKC,EAAYC,EAAiBC,GAC9C,GAAe,WAAf,EAAOH,GACLG,GAAAA,GACE,GAA2B,WAA3B,EAAOH,EAAIC,KACmC,WAA5C,EAAOD,EAAIC,GAAYC,IAClBF,OAAAA,EAAIC,GAAYC,GAAiBC,OAGvC,CAAA,IAAID,EAKFF,OAAAA,EAAIC,GAJP,GAA2B,WAA3B,EAAOD,EAAIC,IACND,OAAAA,EAAIC,GAAYC,IA4D/B,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAAA,QAAA,aAAA,QAAA,gBAAA,QAAA,qBAAA,EA7CA,IAAME,EAAkB,SAAyBJ,GAC1C,IAAA,IAAIK,KAAOL,EACPA,OAAAA,EAAIK,IA2Cf,QAAA,gBAAA,EAhCA,IAAMC,EAAkB,SAAyBN,GAC1C,IAAA,IAAIK,KAAOL,EACP,MAAA,CAACK,EAAKL,EAAIK,KA8BrB,QAAA,gBAAA,EAtBA,IAAME,EAAe,SAAsBP,GACpC,IAAA,IAAIQ,KAAQR,EACXS,GAAAA,OAAOC,UAAUC,eAAeC,KAAKZ,EAAKQ,GACrC,OAAA,EAGJ,OAAA,GAOT,GASA,QAAA,aAAA,EATsB,YAAXK,oBAAAA,OAAAA,YAAAA,EAAAA,SAAqB,CACxBC,IAAAA,EAAU,CAAEf,SAAAA,EAAUK,gBAAAA,EAAiBE,gBAAAA,EAAiBC,aAAAA,GAIzD,IAAA,IAAIQ,KAFTF,OAAOG,GAAKH,OAAOG,IAAM,GAERF,EACfD,OAAOG,GAAGD,GAAQD,EAAQC","file":"obj.js","sourceRoot":"../esm","sourcesContent":["/**\n * Makes it safe to use properties of unknown objects. Checks if object exists before getting property.\n *    For example, calling `base1.obj3.property2`,\n *    if base1 or obj3 is not an object, or is not defined, this will crash.\n *    Wrap it to be safe `_re(base1, 'obj3', 'property2')`.\n * @param {object} obj - object that you are unsure about - if it is null/undefined, that's ok\n * @param {string} prop_child - name of property of obj\n * @param {string} prop_grandchild - name of property of prop_child\n * @param {string} prop_grandgrandchild - name of property of prop_grandchild\n * @returns {*} - value of prop_grandchild, or prop_child whichever is more specific - or undefined\n */\nfunction obj_prop(obj, prop_child, prop_grandchild, prop_grandgrandchild) {\n  if (typeof obj === \"object\") {\n    if (prop_grandgrandchild) {\n      if (typeof obj[prop_child] === \"object\") {\n        if (typeof obj[prop_child][prop_grandchild] === \"object\") {\n          return obj[prop_child][prop_grandchild][prop_grandgrandchild];\n        }\n      }\n    } else if (prop_grandchild) {\n      if (typeof obj[prop_child] === \"object\") {\n        return obj[prop_child][prop_grandchild];\n      }\n    } else {\n      return obj[prop_child];\n    }\n  }\n}\n\n\n/**\n * Return the first value in an object\n *    Iterate the object only once. Return the first value.\n * @param {object} obj\n * @returns value of first item in object\n */\nconst obj_first_value = function obj_first_value(obj) {\n  for (let key in obj) { // doesn't loop, but that's the point!\n    return obj[key]\n  }\n};\n\n\n/**\n * Return the first entry (key and value tuple) in an object\n *    Iterate the object only once. Return the first entry.\n * @param {object} obj\n * @returns value of first item in object\n */\nconst obj_first_entry = function obj_first_value(obj) {\n  for (let key in obj) { // doesn't loop, but that's the point!\n    return [key, obj[key]]\n  }\n};\n\n/**\n * @param {object} obj\n * @returns {boolean} - true if empty\n */\nconst obj_is_empty = function obj_is_empty(obj) {\n  for (let prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      return false\n    }\n  }\n  return true\n};\n\n\n/*\n * EXPORT FOR BROWSER\n */\nif (typeof window === \"object\") {\n  const browser = { obj_prop, obj_first_value, obj_first_entry, obj_is_empty };\n  // set up for export\n  window.__ = window.__ || {};\n  // flatten\n  for (let func in browser) {\n    window.__[func] = browser[func];\n  }\n}\n/* EXPORT FOR NODE */\nexport { obj_prop, obj_first_value, obj_first_entry, obj_is_empty };\n"]}
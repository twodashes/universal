{"version":3,"sources":["arrays.js"],"names":["arrays_mix","arrays","master_list","max_length","arr","Math","max","length","index","push","arr_length","arr_from_value","value","len","i","arrays_diff","a","b","combined","concat","filter","el","includes","arr_subtract","arr_remove_item","item","it","arr_includes","arr_truthy_values","val","window","browser","func","__"],"mappings":";AAiIC,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAzHD,SAASA,EAAYC,GACfC,IADuB,EACvBA,EAAc,GAEdC,EAAa,EACDF,EAAAA,EAAAA,GAJW,IAIH,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAfG,IAAAA,EAAe,EAAA,MACtBD,EAAaE,KAAKC,IAAIF,EAAIG,OAAQJ,IALT,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAWpB,IADHK,IAAAA,EAAQ,IACC,CAEKP,IAFL,EAEKA,EAAAA,EAAAA,GAFL,IAEa,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAfG,IAAAA,EAAe,EAAA,MAClBA,EAAII,IAENN,EAAYO,KAAKL,EAAII,KALd,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAWPA,KADJA,GACaL,EACX,MAGGD,OAAAA,EAST,SAASQ,EAAYN,GACZA,OAAAA,GAAOA,EAAIG,OAASH,EAAIG,OAAS,EAM1C,SAASI,EAAgBC,EAAOC,GAEzB,IADDT,IAAAA,EAAM,GACDU,EAAI,EAAGA,EAAID,EAAKC,IACvBV,EAAIK,KAAKG,GAEJR,OAAAA,EAaT,SAASW,IAAaC,IAAAA,EAAE,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIC,EAAE,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAErBC,OADQF,EAAEG,OAAOF,GACRG,OAAQ,SAAAC,GACjB,IAACL,EAAEM,SAASD,KAAQJ,EAAEK,SAASD,GAClC,OAAOA,IAWb,SAASE,IAAcP,IAAAA,EAAE,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIC,EAAE,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACtBD,OAAAA,EAAEI,OAAO,SAAUN,GACjB,OAACG,EAAEK,SAASR,KAOvB,SAASU,IAAiBpB,IAAAA,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIqB,EAAK,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAC9BrB,OAAAA,EAAIgB,OAAO,SAAAM,GAAIA,OAAAA,IAAKD,IAS7B,SAASE,EAAcX,EAAGC,GACjBD,OAAAA,EAAEI,OAAO,SAAUN,GACjBG,OAAAA,EAAEK,SAASR,KAStB,SAASc,EAAmBxB,GACnBA,OAAAA,EAAIgB,OAAO,SAACS,GAAQ,QAAEA,IAO/B,GAQC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAAA,QAAA,aAAA,EAAA,QAAA,WAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,aAAA,EAAA,QAAA,kBAAA,EAAA,QAAA,YAAA,EAAA,QAAA,WAAA,EARqB,YAAXC,oBAAAA,OAAAA,YAAAA,EAAAA,SAAqB,CACxBC,IAAAA,EAAU,CAAEpB,eAAAA,EAAgBgB,aAAAA,EAAcjB,WAAAA,EAAYc,gBAAAA,EAAiBD,aAAAA,EAAcK,kBAAAA,EAAmBb,YAAAA,EAAaf,WAAAA,GAItH,IAAA,IAAIgC,KAFTF,OAAOG,GAAKH,OAAOG,IAAM,GAERF,EACfD,OAAOG,GAAGD,GAAQD,EAAQC","file":"arrays.map","sourceRoot":"../esm","sourcesContent":["/**\n * Mix multiple lists of strings into one list, by taking one item from each\n *    Takes unlimited number of arguments, but each must be an array!\n * @params strs1 {array} - array of strings\n * @params strs2 {array} - array of strings\n * @params strs3 {array} - array of strings\n * @returns {array} - new array (immutable), aggregated\n */\nfunction arrays_mix (arrays) {\n  let master_list = [];\n  // find length of longest array\n  let max_length = 0;\n  for (let arr of arrays) {\n    max_length = Math.max(arr.length, max_length);\n  }\n\n  // iterate by index\n  // check item at each index in each array\n  let index = 0;\n  while (true) {\n    // add one item from each array\n    for (let arr of arrays) {\n      if (arr[index]) {\n        // add item if exists\n        master_list.push(arr[index]);\n      }\n    }\n\n    // next index\n    index++;\n    if (index >= max_length) {\n      break\n    }\n  }\n  return master_list\n}\n\n/**\n * arr.length alternative\n *      actually useful, because it checks for existence of ${arr}\n * @param arr {array}\n * @returns {number}\n */\nfunction arr_length (arr) {\n  return arr && arr.length ? arr.length : 0\n}\n\n/**\n * Create an array\n */\nfunction arr_from_value (value, len) {\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(value);\n  }\n  return arr\n}\n\n/**\n * Find all differences between 2 arrays. What values in either one are NOT contained in the other.\n *    ```\n *    arrays_diff([1,2,3,4,5,6,7],[4,5,6,7,8,9])\n *    // [ 1, 2, 3, 8, 9 ]\n *    ```\n * @param a {array} - first array\n * @param b {array} - second array\n * @returns {array} - returns an array of values which only appear once, not in both arrays\n */\nfunction arrays_diff (a=[], b=[]) {\n  let combined = a.concat(b);\n  return combined.filter( el => {\n    if ( !a.includes(el) || !b.includes(el) )\n      return el;\n  });\n}\n\n/**\n * Subtract array B values from array A. Return remaining array A. Expects 2 parameters, each an array.\n *      NOTE: first array A must be the main one. Words also appearing in B will be removed\n * @param a {array} - values we care about. Analyze these, compared to b\n * @param b {array} - for comparison only. Array values unique to B will be ignored\n * @returns {array} - returns an array of values which appear in A but not B\n */\nfunction arr_subtract (a=[], b=[]) {\n  return a.filter(function (i) {\n    return !b.includes(i)\n  })\n}\n\n/**\n * Remove an item (if exact match string/number) from array\n */\nfunction arr_remove_item (arr=[], item='') {\n  return arr.filter(it=>it!==item)\n}\n\n/**\n * Similarities between arrays A and B\n * @param a {array}\n * @param b {array}\n * @returns {array} - returns an array with values which appear in both A and B\n */\nfunction arr_includes (a, b) {\n  return a.filter(function (i) {\n    return b.includes(i)\n  })\n}\n\n/**\n * Array with empty/falsy values removed.\n * @param arr {array}\n * @returns {array}\n */\nfunction arr_truthy_values (arr) {\n  return arr.filter((val) => !!val)\n}\n\n\n/*\n * EXPORT FOR BROWSER\n */\nif (typeof window === \"object\") {\n  const browser = { arr_from_value, arr_includes, arr_length, arr_remove_item, arr_subtract, arr_truthy_values, arrays_diff, arrays_mix };\n  // set up for export\n  window.__ = window.__ || {};\n  // flatten\n  for (let func in browser) {\n    window.__[func] = browser[func];\n  }\n}\n\nexport { arr_from_value, arr_includes, arr_length, arr_remove_item, arr_subtract, arr_truthy_values, arrays_diff, arrays_mix };\n"]}
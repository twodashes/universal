{"version":3,"sources":["sort_words.js"],"names":["sort_strings_by_length","arr","desc","sort_func","help_sort_strings_by_length","bind","sort","sort_strings_by_width","help_sort_strings_by_width","a","b","toString","length","a_width","str_width","JSON","stringify","b_width","str","width","char","char_width_plus","toLowerCase","window","browser","func","__"],"mappings":"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","file":"sort_words.map","sourceRoot":"../esm","sourcesContent":["/** @module common-universal-scripts//functions/sort_words */\n\n/**\n * Sort input array by number of characters in string (or number cast to string)\n * Will sort ASC by default. Pass second parameter to sort by DESC.\n * @param {array} arr - expects array of strings,\n *       but will also accept array of anything,\n *       will cast any child to string `arr[i].toString()`\n * @param {boolean} desc - sort descending?\n *       if false or undefined, will be sorted ascending\n * @returns {array} arr - also modifies original array to returned value!\n */\nconst sort_strings_by_length = function (arr, desc = false) {\n\tlet sort_func = help_sort_strings_by_length.bind({desc});\n\treturn arr.sort(sort_func);\n};\n/**\n * Sort input array NOT JUST by number of characters in string (like sort_strings_by_length),\n * but instead, sort by width of the \"word\".\n *       Words with many short letters (\"i\" and \"l\") will be treated as having fewer characters.\n *       Especially nice glyphs like \"ll\" or \"li\" will be preferred.\n *       Words with wide letters or awkward glyphs (\"w\" or \"sch\") will be given lower position.\n * @param {array} arr - expects array of strings,\n *       but will also accept array of anything,\n *       will cast any child to string `arr[i].toString()`\n * @param {boolean} desc - sort descending?\n *       if false or undefined, will be sorted ascending\n * @returns {array} arr - also modifies original array to returned value!\n */\nconst sort_strings_by_width = function (arr, desc = false) {\n\tlet sort_func = help_sort_strings_by_width.bind({desc});\n\treturn arr.sort(sort_func);\n};\n\n/*\n ***************************************************************************************\n * HELPER FUNCTIONS\n ***************************************************************************************\n */\n\n/**\n * Usage: `[].sort(help_sort_strings_by_length)`\n * Note: NOT EXPORTED\n */\nfunction help_sort_strings_by_length(a, b) {\n\tlet desc = this.desc;\n\tif (desc) {\n\t\treturn b.toString().length - a.toString().length;\n\t}\n\treturn a.toString().length - b.toString().length;\n}\n\n/**\n * Usage: `[].sort(help_sort_strings_by_width)`\n *      String \"width\" is like \"\".length, but accounts for width of each character.\n *      It is not a JavaScript prototype, but is custom made from character map.\n * Note: NOT EXPORTED\n */\nfunction help_sort_strings_by_width(a, b) {\n\tlet desc = this.desc;\n\tlet a_width = str_width(JSON.stringify(a || ''));\n\tlet b_width = str_width(JSON.stringify(b || ''));\n\tif (desc) {\n\t\treturn b_width - a_width;\n\t}\n\treturn a_width - b_width;\n}\n\n/**\n * Get pixel width of characters in word\n * param {string|number|array} str\n *      works best with {string}, but will convert an array or number .toString()\n * returns {number} width - like ''.length, but accounts for width of each character\n */\nfunction str_width(str) {\n\tstr = (str || '').toString(); // cast to string\n\tlet width = 0;\n\tfor (let char of str) {\n\t\twidth += char_width_plus[char.toLowerCase()] || 15; // default to high number if not English character\n\t}\n\treturn width;\n}\nconst char_width_plus = {\n\t'0': 7,\n\t'1': 4,\n\t'2': 6,\n\t'3': 7,\n\t'4': 7,\n\t'5': 7,\n\t'6': 7,\n\t'7': 6,\n\t'8': 7,\n\t'9': 7,\n\t'a': 6,\n\t'b': 7,\n\t'c': 6,\n\t'd': 7,\n\t'e': 6,\n\t'f': 2,\n\t'g': 6,\n\t'h': 6,\n\t'i': 3,\n\t'j': 2,\n\t'k': 5,\n\t'l': 3,\n\t'm': 9,\n\t'n': 6,\n\t'o': 6,\n\t'p': 6,\n\t'q': 6,\n\t'r': 3,\n\t's': 5,\n\t't': 3,\n\t'u': 6,\n\t'v': 5,\n\t'w': 9,\n\t'x': 5,\n\t'y': 5,\n\t'z': 5,\n};\n\n\n/*\n * EXPORT FOR BROWSER\n */\nif (typeof window === \"object\") {\n\tconst browser = { sort_strings_by_length, sort_strings_by_width };\n\t// set up for export\n\twindow.__ = window.__ || {};\n\t// flatten\n\tfor (let func in browser) {\n\t\twindow.__[func] = browser[func];\n\t}\n}\n\nexport { sort_strings_by_length, sort_strings_by_width };\n"]}
{"version":3,"sources":["curry.js"],"names":["call_later","func","args","compose","first","funcs","x","reduce","accumulator","Object","defineProperty","exports","value","window","browser","__"],"mappings":";AAAA,aA0DA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GA5CA,SAASA,EAAWC,EAAMC,GACjB,OAAA,WACED,OAAAA,EAAKC,IAoBhB,SAASC,EAAQC,GAAUC,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAO,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAPA,EAAO,EAAA,GAAA,UAAA,GACzB,OAAA,SAAUC,GACRD,OAAAA,EAAME,OAAO,SAAUC,EAAaP,GAClCA,OAAAA,EAAKO,IACXJ,EAAME,KAOb,GA7CAG,OAAOC,eAAeC,QAAS,aAAc,CAAEC,OAAO,IA6ChC,YAAXC,oBAAAA,OAAAA,YAAAA,EAAAA,SAAqB,CACxBC,IAAAA,EAAU,CAAEd,WAAAA,EAAYG,QAAAA,GAIzB,IAAA,IAAIF,KAFTY,OAAOE,GAAKF,OAAOE,IAAM,GAERD,EACfD,OAAOE,GAAGd,GAAQa,EAAQb,GAI9BU,QAAQX,WAAaA,EACrBW,QAAQR,QAAUA","file":"curry.map","sourceRoot":"../cjs","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * If you want to execute a function LATER, but want to set its arguments NOW.\n * Useful with Promise.all or lists of values each of which you need to set now\n * (for some reason, IDK) but not ready to call the function yet\n * ```\n *    let toDoLater = __.call_later(console.warn, 'go for a run')\n * ```\n * @param {function} func - function you want to call later (to curry). It can be bound\n * @param {array} args - array of arguments (optional, but no need to use this without arguments)\n */\nfunction call_later(func, args) {\n  return function () {\n    return func(args);\n  };\n}\n\n/**\n * Compose unlimited number of functions.\n * One calls the original argument.\n * The output of that becomes the argument for the next function. Repeatedly.\n * NOTE: right now each function works with only 1 argument\n * ```\n *    var f = (x) => x + 5;\n *    var g = (x) => x + 7;\n *    var h = (x) => x + 10;\n *    var fgh = compose(f, g, h);\n *    console.log(fgh(5)) // 27\n * ```\n * @param first {function} - function to call first\n * @param funcs {function} - keep adding arguments (functions)\n * @returns {function(*=): *}\n */\nfunction compose(first, ...funcs) {\n  return function (x) {\n    return funcs.reduce(function (accumulator, func) {\n      return func(accumulator);\n    }, first(x));\n  };\n}\n\n/*\n * EXPORT FOR BROWSER\n */\nif (typeof window === \"object\") {\n  const browser = { call_later, compose };\n  // set up for export\n  window.__ = window.__ || {};\n  // flatten\n  for (let func in browser) {\n    window.__[func] = browser[func];\n  }\n}\n\nexports.call_later = call_later;\nexports.compose = compose;\n"]}
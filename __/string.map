{"version":3,"sources":["string.js"],"names":["str_hash","str","hash","length","i","charCodeAt","str_capitalize","word","charAt","toUpperCase","slice","str_sanitize_loosely","replace","toLowerCase","trim","str_sanitize_strictly","str_insert","string","index","insert","substring","str_trim_char","s","c","RegExp","str_trim_non_alpha","str_syllables_count","match","window","browser","func","__"],"mappings":";AA8FC,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAvFD,SAASA,EAASC,GACZC,IAAAA,EAAO,EACPD,GAAe,IAAfA,EAAIE,OACCD,OAAAA,EAEJ,IAAA,IAAIE,EAAI,EAAGA,EAAIH,EAAIE,OAAQC,IAAK,CAEnCF,GAAQA,GAAQ,GAAKA,EADVD,EAAII,WAAWD,GAE1BF,GAAcA,EAETA,OAAAA,EAAO,GAGhB,SAASI,EAAeC,GACfA,OAAAA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAGnD,SAASC,EAAqBJ,GACrBA,OAAAA,EACJK,QAAQ,MAAO,KACfA,QAAQ,WAAY,IACpBC,cACAC,OAEL,SAASC,EAAsBR,GACtBA,OAAAA,EACJK,QAAQ,UAAW,IACnBC,cACAC,OAGL,SAASE,IAAWC,IAAAA,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIC,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAGC,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAC5CF,OAAAA,EAAOG,UAAU,EAAGF,GAASC,EAASF,EAAOG,UAAUF,EAAOD,EAAOd,QAS9E,SAASkB,EAAcC,EAAGC,GAGjBD,MAFG,MAANC,IAAWA,EAAI,OACT,OAANA,IAAYA,EAAI,QACbD,EAAEV,QAAQ,IAAIY,OAAO,KAAOD,EAAI,OAASA,EAAI,MAAO,KAAM,IAQnE,SAASE,EAAmBxB,GACnBA,OAAAA,EAAIW,QAAQ,IAAIY,OAAO,oBAAqB,MAAO,IAG5D,SAASE,EAAoBnB,GAEvBA,IADJA,EAAOA,EAAKM,eACHV,QAAU,EACV,OAAA,EAILwB,IAAAA,GADJpB,GADAA,EAAOA,EAAKK,QAAQ,mCAAoC,KAC5CA,QAAQ,KAAM,KACTe,MAAM,kBAChBA,OAAAA,EAAQA,EAAMxB,OAAS,EAMhC,GAiBC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAAA,QAAA,SAAA,EAAA,QAAA,WAAA,EAAA,QAAA,qBAAA,EAAA,QAAA,sBAAA,EAAA,QAAA,oBAAA,EAAA,QAAA,cAAA,EAAA,QAAA,mBAAA,EAjBqB,YAAXyB,oBAAAA,OAAAA,YAAAA,EAAAA,SAAqB,CACxBC,IAAAA,EAAU,CACdvB,eAAAA,EACAN,SAAAA,EACAgB,WAAAA,EACAL,qBAAAA,EACAI,sBAAAA,EACAW,oBAAAA,EACAL,cAAAA,EACAI,mBAAAA,GAKG,IAAA,IAAIK,KAFTF,OAAOG,GAAKH,OAAOG,IAAM,GAERF,EACfD,OAAOG,GAAGD,GAAQD,EAAQC","file":"string.map","sourceRoot":"../esm","sourcesContent":["/**\n * Quick easy unique hash generator. Not secure or cryptographic.\n * Not guaranteed to be unique, but will almost always suffice.\n * Good for generating IDs based on text content.\n * Like when entering a new blog or content into a database, when you want to keep your content unique,\n * you can do `let post_id = str_hash(post.author+post.title+post.body)`.\n */\nfunction str_hash(str) {\n  let hash = 0;\n  if (str.length === 0) {\n    return hash;\n  }\n  for (let i = 0; i < str.length; i++) {\n    let char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return hash + \"\";\n}\n\nfunction str_capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\nfunction str_sanitize_loosely(word) {\n  return word\n    .replace(/_-/g, \" \")\n    .replace(/[^\\w ]+/g, \"\")\n    .toLowerCase()\n    .trim();\n}\nfunction str_sanitize_strictly(word) {\n  return word\n    .replace(/[^\\w]+/g, \"\")\n    .toLowerCase()\n    .trim();\n}\n\nfunction str_insert(string = \"\", index = 0, insert = \"\") {\n  return string.substring(0, index) + insert + string.substring(index, string.length);\n}\n\n/**\n * Trim a character other than whitespace\n * @param s {string} - string\n * @param c {string} - remove this character (or characters) from start/end\n * @returns {void | string}\n */\nfunction str_trim_char(s, c) {\n  if (c === \"]\") c = \"\\\\]\";\n  if (c === \"\\\\\") c = \"\\\\\\\\\";\n  return s.replace(new RegExp(\"^[\" + c + \"]+|[\" + c + \"]+$\", \"g\"), \"\");\n}\n\n/**\n * Trim all non-alphabetical (not a-zA-Z) characters\n * @param str {string} - string\n * @returns {string}\n */\nfunction str_trim_non_alpha(str) {\n  return str.replace(new RegExp(\"^[^a-z]+|[^a-z]+$\", \"gi\"), \"\");\n}\n\nfunction str_syllables_count(word) {\n  word = word.toLowerCase(); //word.downcase!\n  if (word.length <= 3) {\n    return 1;\n  } //return 1 if word.length <= 3\n  word = word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, \"\"); //word.sub!(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, '')\n  word = word.replace(/^y/, \"\"); //word.sub!(/^y/, '')\n  let match = word.match(/[aeiouy]{1,2}/g);\n  return match ? match.length : 0; //word.scan(/[aeiouy]{1,2}/).size\n}\n\n/*\n * EXPORT FOR BROWSER\n */\nif (typeof window === \"object\") {\n  const browser = {\n    str_capitalize,\n    str_hash,\n    str_insert,\n    str_sanitize_loosely,\n    str_sanitize_strictly,\n    str_syllables_count,\n    str_trim_char,\n    str_trim_non_alpha\n  };\n  // set up for export\n  window.__ = window.__ || {};\n  // flatten\n  for (let func in browser) {\n    window.__[func] = browser[func];\n  }\n}\n\nexport { str_capitalize, str_hash, str_insert, str_sanitize_loosely, str_sanitize_strictly, str_syllables_count, str_trim_char, str_trim_non_alpha };\n"]}
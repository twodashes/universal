{"version":3,"sources":["string.js","urls.js"],"names":["str_hash","str","hash","length","i","charCodeAt","str_capitalize","word","charAt","toUpperCase","slice","str_sanitize_loosely","replace","toLowerCase","trim","str_sanitize_strictly","str_insert","string","index","insert","substring","str_trim_char","s","c","RegExp","str_trim_non_alpha","str_syllables_count","match","window","browser","func","__","querystring_from_object","params","qs","Object","keys","map","k","encodeURIComponent","join","object_from_querystring","obj","pairs","split","pair","tuple","key","decodeURIComponent","querystring_replace_key_value","queryString","value","JSON","parse","decodeURI","output","entries"],"mappings":"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","file":"urls.map","sourceRoot":"../esm","sourcesContent":["/**\n * Quick easy unique hash generator. Not secure or cryptographic.\n * Not guaranteed to be unique, but will almost always suffice.\n * Good for generating IDs based on text content.\n * Like when entering a new blog or content into a database, when you want to keep your content unique,\n * you can do `let post_id = str_hash(post.author+post.title+post.body)`.\n */\nfunction str_hash(str) {\n  let hash = 0;\n  if (str.length === 0) {\n    return hash;\n  }\n  for (let i = 0; i < str.length; i++) {\n    let char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return hash + \"\";\n}\n\nfunction str_capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\nfunction str_sanitize_loosely(word) {\n  return word\n    .replace(/_-/g, \" \")\n    .replace(/[^\\w ]+/g, \"\")\n    .toLowerCase()\n    .trim();\n}\nfunction str_sanitize_strictly(word) {\n  return word\n    .replace(/[^\\w]+/g, \"\")\n    .toLowerCase()\n    .trim();\n}\n\nfunction str_insert(string = \"\", index = 0, insert = \"\") {\n  return string.substring(0, index) + insert + string.substring(index, string.length);\n}\n\n/**\n * Trim a character other than whitespace\n * @param s {string} - string\n * @param c {string} - remove this character (or characters) from start/end\n * @returns {void | string}\n */\nfunction str_trim_char(s, c) {\n  if (c === \"]\") c = \"\\\\]\";\n  if (c === \"\\\\\") c = \"\\\\\\\\\";\n  return s.replace(new RegExp(\"^[\" + c + \"]+|[\" + c + \"]+$\", \"g\"), \"\");\n}\n\n/**\n * Trim all non-alphabetical (not a-zA-Z) characters\n * @param str {string} - string\n * @returns {string}\n */\nfunction str_trim_non_alpha(str) {\n  return str.replace(new RegExp(\"^[^a-z]+|[^a-z]+$\", \"gi\"), \"\");\n}\n\nfunction str_syllables_count(word) {\n  word = word.toLowerCase(); //word.downcase!\n  if (word.length <= 3) {\n    return 1;\n  } //return 1 if word.length <= 3\n  word = word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, \"\"); //word.sub!(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, '')\n  word = word.replace(/^y/, \"\"); //word.sub!(/^y/, '')\n  let match = word.match(/[aeiouy]{1,2}/g);\n  return match ? match.length : 0; //word.scan(/[aeiouy]{1,2}/).size\n}\n\n/*\n * EXPORT FOR BROWSER\n */\nif (typeof window === \"object\") {\n  const browser = {\n    str_capitalize,\n    str_hash,\n    str_insert,\n    str_sanitize_loosely,\n    str_sanitize_strictly,\n    str_syllables_count,\n    str_trim_char,\n    str_trim_non_alpha\n  };\n  // set up for export\n  window.__ = window.__ || {};\n  // flatten\n  for (let func in browser) {\n    window.__[func] = browser[func];\n  }\n}\n\nexport { str_capitalize, str_hash, str_insert, str_sanitize_loosely, str_sanitize_strictly, str_syllables_count, str_trim_char, str_trim_non_alpha };\n","import { str_trim_char } from './string.js';\n\n/**\n * Convert JavaScript Object to URL querystring\n * ex: \"?one=1&two=something\"\n * @param {object} params - JS Object of key-value query params\n * @return {string} - starting with \"?\". Just that if empty object\n */\nfunction querystring_from_object(params = {}) {\n  let qs = Object.keys(params)\n    .map((k) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\n    .join(\"&\");\n  if (qs) {\n    qs = \"?\" + qs;\n  }\n  return qs\n}\n\n/**\n * Parse the URL querystring to JavaScript Object\n * ex: \"?one=1&two=something\" => {one:1,two:'something'}\n * @param {string} str - starting with \"?\"\n * @return {object}\n */\nfunction object_from_querystring(str = \"\") {\n  // make object\n  let obj = {};\n  let pairs = str.replace(\"?\", \"\").split(\"&\");\n  for (let pair of pairs) {\n    if (!pair) continue\n    let tuple = pair.split(\"=\");\n    let key = tuple[0];\n    if (!key) continue\n    obj[key] = tuple[1] || \"\";\n  }\n  // decode value\n  for (let key in obj) {\n    obj[key] = decodeURIComponent(obj[key] || \"\").trim();\n  }\n  // done\n  return obj\n}\n\n/**\n * Change a url (GET) parameter in queryString string\n * @param queryString {string} - ex: \"?start=10&fruit=apple\"\n * @param key {string} - ex: \"fruit\"\n * @param value {string} - ex: \"species\"\n * @return {string} - ex: \"?start=10&species=apple\"\n */\nfunction querystring_replace_key_value(queryString, key, value) {\n  // clean input\n  queryString = str_trim_char(queryString, \"&\");\n  queryString = str_trim_char(queryString, \"?\");\n  let obj = JSON.parse(\n    '{\"' + decodeURI(queryString).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}'\n  );\n  // replace value\n  obj[key] = value;\n  // rebuild queryString with replaced value\n  let output = \"?\";\n  for (let pair of Object.entries(obj)) {\n    output += pair[0] + \"=\";\n    output += pair[1] + \"&\";\n  }\n  return str_trim_char(output, \"&\")\n}\n\n/*\n * EXPORT FOR BROWSER\n */\nif (typeof window === \"object\") {\n  const browser = { object_from_querystring, querystring_from_object, querystring_replace_key_value };\n  // set up for export\n  window.__ = window.__ || {};\n  // flatten\n  for (let func in browser) {\n    window.__[func] = browser[func];\n  }\n}\n\nexport { object_from_querystring, querystring_from_object, querystring_replace_key_value };\n"]}
{"version":3,"sources":["sort_strings.js"],"names":["sort_strings_by_extension","arr","endings","immutable","sort","sort_strings_by_extension__helper","bind","a","b","a_score","indexOf","substr","sort_strings_by_length_asc","desc","toString","length","sort_strings_by_length_and_position","prefer_position","fix_min_length","ascending","arr_positions","i","that","min_length","max_length","min_position","max_position","delta_position","delta_length","sort_strings_by_length_and_position_asc__helper","e","console","error","a_length","b_length","a_rating_length","b_rating_length","sort_strings_by_matches_in_list","matchList","ratings","str","string","replace","count","word","includes","sort_strings_by_matches_in_list__helper","b_score","sort_strings_by_rating","preferences","sort_strings_by_rating__helper","a_rating","b_rating","sort_strings_by_rating_and_position","multiply_position","rate","min_rating","max_rating","delta_rating","median_rating","min_index","max_index","indexes","delta_index","sort_strings_by_rating_and_position__helper","a_index","sort_strings_combine_lists","arr1","arr2","list","Set","ai","arguments","y","add","window","browser","func","__"],"mappings":"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","file":"sort_strings.map","sourceRoot":"../esm","sourcesContent":["/**\n * Used to sort a list of domain names by their domain extension - putting best ones higher in list.\n * @param arr {Array<String>} - list of strings - each string must contain at least one period \".\"\n *      NOTE: this function modifies the original array, using .sort()!\n * @param endings {array} - list of endings (domain extensions) to sort by. Best = first. Worst = last.\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @returns {array} - sorted array\n */\nfunction sort_strings_by_extension(arr, endings, immutable = false) {\n  if (!arr) return [];\n  if (immutable) arr = [...arr];\n  return arr.sort(sort_strings_by_extension__helper.bind(endings));\n}\nfunction sort_strings_by_extension__helper(a, b) {\n  let a_score = this.indexOf(a.substr(a.indexOf(\".\") + 1));\n  let b_score = this.indexOf(b.substr(b.indexOf(\".\") + 1));\n  return a_score - b_score;\n}\n\n/**\n * Sort array by string length, ascending (or descending with false flag)\n * @param arr {Array<String|Number|Array>}\n * @param desc {boolean} - if true, will sort descending; default is false, ascending\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @returns {array}\n */\nfunction sort_strings_by_length_asc(arr, desc = false, immutable = false) {\n  if (!arr) return [];\n  if (immutable) arr = [...arr];\n  if (desc) {\n    return arr.sort((a, b) => b.toString().length - a.toString().length);\n  } else {\n    return arr.sort((a, b) => a.toString().length - b.toString().length);\n  }\n}\n\n/**\n * Algorithm sort = by Length + by Position in array\n * @param arr {Array.<String>} - array of strings\n * @param prefer_position {number} - number to multiply position rating, to make it more important than length\n * @param fix_min_length {number} - absolute minimum allowed to be used as min_length (default 4)\n *      ex: if 4, algorithm will treat str.length of 2,3,4 the same\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @return {Array.<String>} - array of strings\n */\nfunction sort_strings_by_length_and_position(arr, prefer_position = 10, fix_min_length = 0, immutable = false) {\n  if (!arr) return [];\n  if (immutable) arr = [...arr];\n  try {\n    // prepare ratings by length\n    let ascending = sort_strings_by_length_asc([...arr]);\n    if (!ascending[0]) {\n      return arr;\n    }\n    // prepare ratings by position\n    let arr_positions = {};\n    for (let i in arr) {\n      let string = arr[i];\n      arr_positions[string] = i;\n    }\n    // compile ratings\n    // ${this} in [].sort()\n    let that = {\n      min_length: ascending[0].length,\n      max_length: ascending[ascending.length - 1].length,\n      min_position: 0,\n      max_position: arr.length,\n      delta_position: arr.length,\n      arr_positions: arr_positions,\n      prefer_position: prefer_position\n    };\n    // ${this} fix & finish\n    if (fix_min_length) {\n      that.fix_min_length = fix_min_length;\n      that.min_length = fix_min_length;\n    }\n    that.delta_length = that.max_length - that.min_length;\n    // done\n    return arr.sort(sort_strings_by_length_and_position_asc__helper.bind(that));\n  } catch (e) {\n    console.error(\"invalid input array to sort_strings_by_length_and_position()\");\n    return arr;\n  }\n}\n// helper function:\nfunction sort_strings_by_length_and_position_asc__helper(a, b) {\n  // if length is less than absolute minimum, use absolute minimum\n  let a_length = a.length;\n  let b_length = b.length;\n  if (this.fix_min_length) {\n    if (a.length < this.fix_min_length) a_length = this.fix_min_length;\n    if (b.length < this.fix_min_length) b_length = this.fix_min_length;\n  }\n  // lower number == good (prefer shorter words)\n  let a_rating_length = (a_length - this.min_length) / this.delta_length;\n  let b_rating_length = (b_length - this.min_length) / this.delta_length;\n  // lower number == good (lower index in array, so started closer to #1)\n  let a_position_length = ((this.arr_positions[a] - this.min_position) / this.delta_position) * this.prefer_position;\n  let b_position_length = ((this.arr_positions[b] - this.min_position) / this.delta_position) * this.prefer_position;\n  // combine the two\n  return a_rating_length + a_position_length - (b_rating_length + b_position_length);\n}\n\n/**\n * Sort strings by relevance (matching words in list)\n * Strings will be promoted if they match most words in list, and have fewest remaining characters.\n * @param arr {Array<String>} - list of strings\n *      (this function modifies the original array, using .sort())\n * @param matchList {array} - list of words -\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @returns {array} - sorted array\n */\nfunction sort_strings_by_matches_in_list(arr, matchList, immutable = false) {\n  if (!arr) return [];\n  if (immutable) arr = [...arr];\n  let ratings = {};\n  for (let str of arr) {\n    let string = str.replace(/[^a-z0-9]/gi, \"\");\n    let count = 0;\n    for (let word of matchList) {\n      if (string.includes(word)) {\n        count++;\n        string = string.replace(word, \"\");\n      }\n    }\n    ratings[str] = count;\n  }\n  return arr.sort(sort_strings_by_matches_in_list__helper.bind(ratings));\n}\nfunction sort_strings_by_matches_in_list__helper(a, b) {\n  let a_score = this[a] || 0;\n  let b_score = this[b] || 0;\n  return b_score - a_score;\n}\n\n/**\n * Sort array of strings by separate dictionary of [{string:rating},]\n * However, will be sorted not in relation to other ratings, but in relation to zero 0.\n * If higher than 0, will be promoted. Lower than 0 will be demoted to back of list.\n * (Todo: File/Function should be renamed, to reflect this relation to zero!)\n * @param arr {Array.<String>} - array of strings\n * @param preferences {object} - dictionary of {string:rating}\n *      rating lt 0 == bad, gt 0 == good, if undefined, default 0\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @return {Array.<String>} - array of strings\n */\nfunction sort_strings_by_rating(arr, preferences, immutable = false) {\n  if (!arr) return [];\n  if (immutable) arr = [...arr];\n  // compile ratings\n  let ratings = {};\n  for (let string of arr) {\n    // from dictionary of {string:rating}\n    // good == above zero; bad == below zero;\n    ratings[string] = preferences[string] || 0;\n  }\n  return arr.sort(sort_strings_by_rating__helper.bind(ratings));\n}\n// helper function:\nfunction sort_strings_by_rating__helper(a, b) {\n  let a_rating = this[a];\n  let b_rating = this[b];\n  // prefer higher number\n  // if b is higher, then rate it better than a\n  return b_rating - a_rating;\n}\n\n/**\n * Sort array of strings by separate dictionary of [{string:rating},], and\n * also by position in array. Items at front of array will be rated higher.\n * @param arr {Array.<String>} - array of strings\n * @param ratings {object} - dictionary of {string:rating}\n *      ratings does not have to contain an entry for each arr item\n *          if missing, will be given default 0\n *      likewise, it may contain more entries than arr,\n *          extras will be ignored\n * @param multiply_position {number} - make position x times more important than rating\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @return {Array.<String>} - array of strings\n */\nfunction sort_strings_by_rating_and_position(arr, ratings, multiply_position = 1, immutable = false) {\n  if (!arr) return [];\n  if (immutable) arr = [...arr];\n  let that = {};\n\n  // ratings\n  that.min_rating = null;\n  that.max_rating = null;\n  that.ratings = ratings;\n  for (let str in ratings) {\n    let rate = ratings[str];\n    // compare ratings to each other\n    if (that.min_rating === null || rate < that.min_rating) {\n      that.min_rating = rate;\n    }\n    if (that.max_rating === null || rate > that.max_rating) {\n      that.max_rating = rate;\n    }\n  }\n  that.delta_rating = that.max_rating - that.min_rating;\n  that.median_rating = that.min_rating + that.delta_rating / 2;\n\n  // prepare position indexes\n  that.min_index = 0;\n  that.max_index = arr.length - 1;\n  that.indexes = {};\n  for (let i in arr) {\n    // count up - first item = 0, last item = (length-1)\n    let string = arr[i];\n    that.indexes[string] = i;\n  }\n  that.delta_index = that.max_index - that.min_index;\n  that.multiply_position = multiply_position;\n\n  // sort\n  return arr.sort(sort_strings_by_rating_and_position__helper.bind(that));\n}\n\n// helper function:\nfunction sort_strings_by_rating_and_position__helper(a, b) {\n  // higher == better\n  // normalized to 0-1 range\n  // highest rating gets 1, lowest rating gets 0\n  let a_rating =\n    (this.delta_rating -\n      (this.max_rating - (typeof this.ratings[a] !== \"undefined\" ? this.ratings[a] : this.median_rating))) /\n    this.delta_rating;\n  let b_rating =\n    (this.delta_rating -\n      (this.max_rating - (typeof this.ratings[b] !== \"undefined\" ? this.ratings[b] : this.median_rating))) /\n    this.delta_rating;\n\n  // higher == better\n  // normalized to 0-1 range\n  // lowest index gets 1, highest index gets 0\n  // (multiply_position to make position score more important than rating score)\n  let a_index = ((this.max_index - this.indexes[a]) / this.delta_index) * this.multiply_position;\n  let b_index = ((this.max_index - this.indexes[b]) / this.delta_index) * this.multiply_position;\n\n  // combine the two\n  // if b is higher, then sort it closer to front of array compared to a\n  return b_rating + b_index - (a_rating + a_index);\n}\n\n/**\n * NOT [].sort(). Simply combines multiple arrays, one item from each array at a time.\n * Like taking two decks of cards, and making one double deck, by taking one card at a time from each deck.\n * But can be more than 2 arrays! Pass in as many as needed. Will take one item from each, at a time.\n * @param arr1 {Array.<String>} - array of strings\n * @param arr2 {Array.<String>} - array of strings\n * @return {Array.<String>} - array of strings, combined!\n */\nfunction sort_strings_combine_lists(arr1, arr2) {\n  if (!arr1 && !arr2) return [];\n  if (!arr1 && arr2) return arr2;\n  if (arr1 && !arr2) return arr1;\n  let list = new Set();\n\n  /*\n   * setup pointers (will be incremented each time new item is taken from array)\n   */\n  let ai = {};\n  for (let i in arguments) {\n    // will be incremented (ai[i]++) before each use\n    ai[i] = -1; // on first use will === 0\n  }\n\n  /*\n   * iterate all passed-in arrays, one by one, take one new item at a time\n   */\n  for (let y = 0; y < 50; y++) {\n    for (let i in arguments) {\n      let arr = arguments[i];\n      let str = arr[ai[i]++];\n      if (str) {\n        list.add(str);\n      }\n    }\n  }\n\n  // console.log('sort_strings_combine_lists list', list);\n  return [...list];\n  // return arr1;\n}\n\n/*\n * EXPORT FOR BROWSER\n */\nif (typeof window === \"object\") {\n  const browser = {\n    sort_strings_by_extension,\n    sort_strings_by_length_and_position,\n    sort_strings_by_length_asc,\n    sort_strings_by_matches_in_list,\n    sort_strings_by_rating,\n    sort_strings_by_rating_and_position,\n    sort_strings_combine_lists\n  };\n  // set up for export\n  window.__ = window.__ || {};\n  // flatten\n  for (let func in browser) {\n    window.__[func] = browser[func];\n  }\n}\n\nexport { sort_strings_by_extension, sort_strings_by_length_and_position, sort_strings_by_length_asc, sort_strings_by_matches_in_list, sort_strings_by_rating, sort_strings_by_rating_and_position, sort_strings_combine_lists };\n"]}
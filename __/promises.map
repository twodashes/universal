{"version":3,"sources":["promises.js"],"names":["sleep","ms","Promise","r","setTimeout","arr_each_promise_all","array","fn","all","map","item","window","browser","func","__"],"mappings":";AA+BC,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qBAAA,EAAA,QAAA,WAAA,EA/BD,IAAMA,EAAQ,WAASC,IAAAA,EAAK,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACnB,OAAA,IAAIC,QAAQ,SAAAC,GAAKC,OAAAA,WAAWD,EAAGF,MAaxC,SAASI,EAAqBC,EAAOC,GAC5BL,OAAAA,QAAQM,IAAIF,EAAMG,IAAI,SAASC,GAC7BH,OAAAA,EAAGG,MAOd,GAQC,QAAA,MAAA,EARqB,YAAXC,oBAAAA,OAAAA,YAAAA,EAAAA,SAAqB,CACxBC,IAAAA,EAAU,CAAEP,qBAAAA,EAAsBL,MAAAA,GAInC,IAAA,IAAIa,KAFTF,OAAOG,GAAKH,OAAOG,IAAM,GAERF,EACfD,OAAOG,GAAGD,GAAQD,EAAQC","file":"promises.map","sourceRoot":"../esm","sourcesContent":["const sleep = function(ms = 0) {\n  return new Promise(r => setTimeout(r, ms))\n};\n\n/**\n * Calls a function on each item in array (like [].forEach but works with Promises)\n *    Returns a Promise which resolves when all your promises are done processing.\n *    NOTE: unlike Promise.all, this does not crash on rejected Promises\n *    NOTE: your responses may not come back in the same order as they were sent\n * @param {array<*>} array - array with any type of values\n * @param {function} fn - a function which returns a Promise\n *    each value from array will be fed into the fn, all executed concurrently\n * @return {Promise}\n */\nfunction arr_each_promise_all(array, fn) {\n  return Promise.all(array.map(function(item){\n    return fn(item)\n  }))\n}\n\n/*\n * EXPORT FOR BROWSER\n */\nif (typeof window === \"object\") {\n  const browser = { arr_each_promise_all, sleep };\n  // set up for export\n  window.__ = window.__ || {};\n  // flatten\n  for (let func in browser) {\n    window.__[func] = browser[func];\n  }\n}\n\nexport { arr_each_promise_all, sleep };\n"]}